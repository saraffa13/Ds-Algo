// Important points to remember
1.Plus one ya minus one kro agar condition satisfy nhi ho rha hai.


//General implementation of binary search

//LeftMost occurance of x or the number greater than x
void search(vi &arr,int n,int x){
    int l =0,r = n-1;
    while(l<=r){
        int m = (l+r)/2;
        if(arr[m]>=x){
            r = m-1;      
        }
        else{
            l = m+1;
        }
    }
    cout<<l<<endl;
}

//RightMost occurance of x or the number smaller than x
void search(vi &arr,int n,int x){
    int l =0,r = n-1;
    while(l<=r){
        int m = (l+r)/2;
        if(arr[m]>x){
            r = m-1;      
        }
        else{
            l = m+1;
        }
    }
    cout<<r<<endl;
}




//Count the number of elements 
auto l = lower_bound(arr.begin(),arr.end(),x);
auto r = upper_bound(arr.begin(),arr.end(),x);
cout<<r-l<<endl;


//Shorter way to count the number of elements
auto l  =  equal_range(arr.begin(),arr.end(),x);
cout<<l.second-l.first<<endl;

An important use of binary search is to find the position where the value of a function changes.
An ordered set can be used to implement binary search, if the contraints are low. 
