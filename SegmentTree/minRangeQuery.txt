int query(int si, int ss, int se, int qs, int qe){
    // outside return INFINITY
    if(ss>qe||se<qs)return 1e9;
    if(ss>=qs && se<=qe){
        return st[si];
    }
    int mid = (se+ss)/2;
    int l = query(2*si,ss, mid ,qs, qe);
    int r = query(2*si+1,mid+1,se ,qs, qe);
    return min(l,r);
}
void buildTree(int si, int ss, int se){

    if(ss == se){
        st[si] = arr[ss];
        return;
    } 
    int mid = (ss+se)/2;
    buildTree(2*si,ss, mid);
    buildTree(2*si+1,mid+1,se);
    st[si]=min(st[2*si],st[2*si+1]);
     
}
void update(int si, int ss, int se, int qi){

    if(ss == se){
        st[si] = arr[ss];
        return;
    } 
    int mid = (ss+se)/2;
    if(q<=mid){
        buildTree(2*si,ss, mid);
    }else{
        buildTree(2*si+1,mid+1,se);
    }
    st[si]=min(st[2*si],st[2*si+1]);
}


//lazy update -=================================================
void update(int si, int ss, int se, int qs, int qe, int val){
    if(lazy[si]!=0){
        int dx = lazy[si];
        st[si]+=(se-ss+1)*dx;
        lazy[si]=0;
        if(ss!=se){
            
            lazy[2*si]+=dx;
            lazy[2*si+1]+=dx
        }   
    }

    if((ss>qe) || (se<qs)){
        return;
    }
    if(ss>=qs && se<=qe){
        int dx = (se-ss+1)*val;
        st[si]+=dx;
        if(ss!=se){
            lazy[2*si]+=val;
            lazy[2*si+1]+=val;
        }   
        return;
    }
    int mid = (ss+se)/2;
    update(si,ss,mid,qs,qe,val);
    update(si,mid+1,se,qs,qe,val);
    st[si] =(st[2*si]+st[2*si+1]);
}

int query(int si, int ss, int se, int qs, int qe){

    if(lazy[si]!=0){
        int dx = lazy[si];
        st[si]+=(se-ss+1)*lazy[si];
        lazy[si]=0;
        if(ss!=se){
            lazy[2*si]+=dx;
            lazy[2*si+1]+=dx;
        }
    }

    // outside return INFINITY
    if(ss>qe||se<qs)return 1e9;
    if(ss>=qs && se<=qe){
        return st[si];
    }
    int mid = (se+ss)/2;
    int l = query(2*si,ss, mid ,qs, qe);
    int r = query(2*si+1,mid+1,se ,qs, qe);
    return l+r;
}