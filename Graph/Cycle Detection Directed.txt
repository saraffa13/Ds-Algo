bool dfs(int v, int p){
    vis[v] = 1;
    for(auto x:edges[v]){
        if(!vis[x]){
            if(dfs(x,v))return true;
        }else{
            if(x!=p)return true;
        }
    }
    return false;
}

============================================================================================================

printing the cycle in the undirected graph:-
bool dfs(int v, int p){
    vis[v] = 1;
    res.push_back(v);
    for(auto x:edges[v]){
        if(!vis[x]){
            bool check = dfs(x,v);
            if(check == true)return true;
        }else{
            if(x!=p){
                res.push_back(x);
                return true;   
            }
        }
    }
    res.pop_back();
    return false;
}
=====================================================================================================================


printing cycles in directed graph
vi edges[100005];
int par[100005];
int cs=-1,ce=-1;
int vis[100005];
bool dfs(int v){
    vis[v]=1;
    for(int ch:edges[v]){
        if(!vis[ch]){
            par[ch]=v;
            if(dfs(ch))return 1;
        }else if(vis[ch]==1){
            ce=v;
            cs=ch;
            return 1;
        }
    }

    vis[v]=2;
    return 0;
}

int main(){
    rep(i,1,n+1){
        if(vis[i]==0&&dfs(i)){
            break;
        }
    }
    if(cs == -1){
        cout<<"IMPOSSIBLE"<<endl;
    }else{
        vi cycle;
        cycle.push_back(cs);
        for(int i=ce;i!=cs;i=par[i]){
            cycle.push_back(i);
        }
        cycle.push_back(cs);
        reverse(all(cycle));
        cout<<cycle.size()<<endl;
        vprint(cycle);
    }
}

=====================================================================================================================
printing cycles in undirected graph
bool dfs(int v,int p){
    for(int ch:edges[v]){
        if(!vis[ch]){
            vis[ch]=1;
            par[ch]=v;
            if(dfs(ch,v))return 1;
        }else if (vis[ch] && ch!=p){
            cs=ch,ce=v;
            return 1;
        }
    }
    return 0;
}