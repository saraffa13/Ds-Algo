vi edges[150005];
vi label(150005);
vi sz(150005);
vi nedges(150005);


void relabel(int v, int target){
    if(label[v]==target)return;

    label[v] = target;
    for(int x:edges[v]){
        relabel(x,target);
    }
}



void merge(int u, int v){
    edges[u].push_back(v);
    edges[v].push_back(u);

    int cu = label[u],cv = label[v];

    ++[nedges[cu]];
    if(cu==cv)return ;


    if(cu>cv){
        swap(u,v);
        swap(cv,cv);
    }

    relabel(u,v);

    nedges[cv]+=nedges[cu];
    sz[cv]+=sz[cu];
    

}


void solve(){
    int n I,m I;


    rep(i,1,n+1){
        sz[i] = 1;
        label[i] =i;
    }

    rep(i,0,m){
        int a I,b I;
        merge(a,b);
    }
}



==============================================================================================================

int parent[100005];
int sz[100005];
void makeSet(){
	rep(i,0,100005){
		parent[i] = i;
		sz[i] = 1;
	}
}

int findPar(int node){
	if(node == parent[node])return node;
	return parent[node]=findPar(parent[node]);
}

void Union(int u, int v){
	u = findPar(u);
	v = findPar(v);
	if(u!=v){
		if(sz[u]<sz[v])swap(u,v);
		parent[v] = u;
		sz[u] += sz[v];
	}
}



==========================================================================================================
struct DSU{

    vi par,sz;
    
    DSU(int n){
        par.resize(n+1);
        sz.resize(n+1);
        rep(i,1,n+1){
            par[i]=i;
            sz[i]=1;
        }
    }

    bool sameSet(int a, int b){
        return findPar(a)==findPar(b);
    }

    bool getSize(int a){
        return sz[findPar(a)];
    }

    int findPar(int a){
        if(a == par[a])return a;
        return par[a]=findPar(par[a]);
    }
    bool Union(int a, int b){
        a = findPar(a);
        b = findPar(b);
        if(a!=b){
            if(sz[a]<sz[b])swap(a,b);
            par[b]=a;
            sz[a] += sz[b];
            return 1;
        }
        return 0;
    }

};