int lca (int a, int b){
    int d = level[b] - level[a];
    while(d--){
        b = par[b];
    }

    if(a == b)return a;

    while(par[a]!=par[b]){
        a = par[a];
        b = par[b];
    }

    return par[a];
}


Binary lifting approach :-

int lca (int a, int b){
    int d = level[b] - level[a];
    if(level[b]<level[a])swap(a,b);
    
    while(d>0){
        int i = log2(d);
        b = LCA[b][i];
        d-=(1<<i);
    }

    if(a == b)return a;

    while(LCA[a][0]!=LCA[b][0]){
        a = LCA[a][0];
        b = LCA[b][0];
    }

    return LCA[a][0];
}

void dfs(int u, int p, int i){
    LCA[u][i] = p;
    for(auto x:edges[u]){
        dfs(x,u);
    }
}


void init () {
    dfs(1,-1);
    for(int j=1;j<=maxn;j++){
        for(int i=1;i<=n;i++){
            if(LCA[i][j-1]!=-1){
                int p = LCA[i][j-1];
                LCA[i][j] = LCA[p][j-1];                
            }
        }
    }
}