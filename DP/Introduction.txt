It is used where optimal substructure and overlapping subproblems exists.
Optimal substructure means the solution of similar problem with smaller constraint can be combined to solve the bigger problem.



Ek index ko lo. baaki saare ke liye recursion kr do.





Coin Change me do tarike se approach kr skte hai. Ek to amount se aur dusra index se(striver).


==========================================================================================================================
1.LIS


==========================================================================================================================
2.MAX SUM
 int n I;
    vector<vi> arr(n,vi (n));
    Vfill(arr);
    rep(i,0,n){
        rep(j,0,n){
            if(i>0)arr[i][j]+=arr[i-1][j];
            if(j>0)arr[i][j]+=arr[i][j-1];
            if(i>0&&j>0)arr[i][j]-=arr[i-1][j-1];
        }
    }
    Vprint(arr);
    int maxSum = INT_MIN;
    rep(i,0,n){
        rep(j,0,n){
            rep(k,i,n){
                rep(l,j,n){
                    if(i == 0){
                        if(j == 0){
                            maxSum = max(maxSum,arr[k][l]);
                        }else{
                            maxSum = max(maxSum,arr[k][l]-arr[k][j-1]);
                        }
                    }else if(j == 0){
                            maxSum = max(maxSum,arr[k][l]-arr[i-1][l]);
                    }else{
                        maxSum = max(maxSum,arr[k][l]+arr[i-1][j-1]-arr[k][j-1]-arr[i-1][l]);
                    }
                }
            }
        }
    }
    cout<<maxSum<<endl;
==========================================================================================================================
3. O-1 Knapsack (Subset Sum)

==========================================================================================================================