int parent(int x){
	return (x-1)/2;
}
int left(int x){
	return 2*x+1;
}
int right(int x){
	return 2*x+2;
}
struct Heap{
	vector<int>arr;
	int size=0;
	void minHeapify(int i){
		int sm = i;
		int lt = left(i),rt=right(i);
		if(lt < size && arr[lt]<arr[i]){
			i = lt;
		}
		if(rt< size && arr[rt]<arr[i]){
			i = rt;
		}
		if(i!=sm){
			swap(arr[i],arr[sm]);
			minHeapify(i);
		}
	}
	int extractMin(){
		if(size == 0)return -1;
		int x =arr[0];
		swap(arr[0],arr[size-1]);
		size--;
		minHeapify(0);
		return x;
	}
	void insert(int x){
		if(size == arr.size()){
			arr.push_back(x);
		}else{
			arr[size] = x;
		}
		size++;
		int i = size-1;
		while(i>0 && arr[parent(i)]>arr[i]){
			swap(arr[i],arr[parent(i)]);
			i = parent(i);
		}
	}
	
	int findIndex(int x){
		int i = -1;
		for(int j=0;j<size;j++){
			if(arr[j] == x)return j;
		}
		return -1;
	}
	void d(int x){
		int index = findIndex(x);
		if(index == -1)return ;
		arr[index] = INT_MIN;
		for(;index>=0&&arr[index]<arr[parent(index)];){
			swap(arr[index],arr[parent(index)]);
			index = parent(index);
		}
		extractMin();
	}
	bool isEmpty(){
		return size == 0;
	}
	void print(){
		while(size){
			int x = extractMin();
			cout<<x<<" ";
		}
	}
	void makeHeap (vector<int>&x){
		arr = x;
		int s = arr.size();
		for(int i = (s-2)/2;i>=0;i--){
			minHeapify(i);
		}
		rep(i,0,arr.size()){
			x[i]=arr[i];
		}
	}
};