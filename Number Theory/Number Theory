Program to find the prime factors of a number 

void primefactors(int n){
    for(int i=2;i<=n;i++){
        while(n%i==0){
            cout<<i<<" ";
            n/=i;
        }
    }
}


The more efficient program is :-

void primefactors(int n){
    while(n%2==0){
        cout<<2<<" ";
        n/=2;
    }
    for(int i=3;i*i<=n;i+=2){
        while(n%i==0){
            cout<<i<<" ";
            n/=i;
        }
    }
    if(n>2){
        cout<<n<<endl;
    }
}


Program to find out gcd of two numbers :-
int gcd(int a,int b){
    if(b==0)return a;
    else return gcd(b,a%b);
}



Modular Arithematic :-
1.(a + b) % m = (a % m + b % m) % m
2.(a − b) % m = (a % m − b % m) % m
3.(a · b) (% m) = ((a % m) · (b % m)) % m
4.Use Binpow for exponentiation


Let the number be 12 = (2^2)*(3^1)
    1.Number of factors = (2+1)*(1+1) = 3 *2
    2.Sum of factors = (2^(3)-1)/(2-1) * (3^2-1)/(3-1)
    3.Product of factors = 12^(number of factors by two) {if the no of factors is not even then (12^(no. of factors/2))*(root of the number)}


Density of primes = n / ln(n);

• conjecture: Each even integer n > 2 can be represented as a
sum n = a+ b so that both a and b are primes.
• Twin prime conjecture: There is an infinite number of pairs of the form
{p, p +2}, where both p and p +2 are primes.
• Legendre’s conjecture: There is always a prime between numbers n^2 and (n+1)^2, where n is any positive integer.




Sieve of eratosthenes :-
set<int>s;
void sieveOfEratosthenes(int n){
    vi sieve(n+1);
    for(int i=2;i<n;i++){
        if(sieve[i]){
            continue;
        }
        for(int j = i*2;j<n;j+=i){
            sieve[j] = i;
        }
    }
    rep(i,2,1000005){
        if(sieve[i]==0)s.insert(i);
    }
}



